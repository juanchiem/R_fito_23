# Métricas básicas

```{r include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE, 
                      message = FALSE, 
                      eval=TRUE, 
                      fig.width = 12, 
                      fig.height = 8)
```

```{r}
# Setup
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, rio, epifitter)
```

Probamos una forma para calcular la proporción de árboles enfermos:

```{r}
# status de enfermedad: 0=sano, 1=enfermo
muestra <- c(0,0,0,1)
mean(muestra)
```

```{r}
# está enfermo? F=no, T=si
muestra_logica <- c(F,F,F,T)
mean(muestra_logica)
```

```{r}
# severidad de cada especimen: 0 a 100%
muestra_numerica <- c(0,0,0,3)
mean(muestra_numerica>0)
```

```{r}
sev_media <- mean(muestra_numerica) # 8/10
sev_media
```

```{r}
# severidad de cada especimen: 0 a 100%
muestra_clase <- c(10,1,2,7,0,0,0,0,0,0)
inc <- mean(muestra_clase>0)*100
inc
sev <- mean(muestra_clase)
sev
```

## ABC

Area bajo la curva de progreso de la enfermedad

Reproducción de: [APS-AUDPC](https://www.apsnet.org/edcenter/disimpactmngmnt/topc/EcologyAndEpidemiologyInR/DiseaseProgress/Pages/AUDPC.aspx)

```{r}
epidemia <- tibble(
  time = c(0,2,5,6), 
  dis = c(1,2,7,7.5))
```

```{r}
epidemia %>%  
  ggplot()+
  aes(x=time, y = dis)+
  geom_point()+
  geom_line()
```

Area bajo la curva del progreso de la enfermedad (ABC) - Absoluta

```{r}
abc_1  <- with(epidemia, 
                 AUDPC(time = time, 
                  y = dis, 
                  y_proportion = FALSE, 
                  type = "absolute"))  
abc_1
```
## Caso de estudio 

Ahora veamos una manipulacion multi-nivel de un muestreo multi-regional e inter-anual. 
Para eso carguemos el dataset Olivo/bacteriosis

```{r}
# load("data/data.RData")
olivo <- rio::import("https://raw.githubusercontent.com/epifito/fitopatometria-r/main/data/olivo.csv")
olivo %>% view() 
```

> dataset formato "wide" (planilla de campo) con 30 columnas de sev por arbol individual [datos simulados]

Re-estructuracion de los datos

Pasamos de formato wide a long para hacer operaciones por grupos. 
Ojo: No siempre debe hacerse este paso aunque nos habilita a group_by()+ summarise()
  # le pedimos que apile las columnas conteniendo a las plantas 1 a 30
  # el nombre de las columnas las apile en una columna llamada "tree"
  # la observaciones de severidad las apile en una columna llamada sev
  # el producto de este re-arreglo se llamará "oli_long"
  
```{r}
olivo %>%   
  pivot_longer(cols = `1`:`30`, 
         names_to = "tree",
         values_to = "sev") -> oli_long 
```

Chequeamos cuántos árboles fueron evaluados en cada año/región/lote:

```{r}
oli_long
```

Chequeamos cuantos arboles se evaluaron por campo

```{r}
oli_long %>%  
  group_by(year, loc, farm) %>% 
  summarise(n= sum(!is.na(sev))) %>%  
  pivot_wider(names_from=year, 
              values_from = n)
```

Imprimimos los 30 árboles de un mismo lote 

```{r}
oli_long %>%  
  arrange(loc, year) %>%  
  print(n=30)
```

- Incidencia 

(nivel lote - evolución interanual)

Tip: pueden ir seleccionando por lineas para ir probando el codigo antes de ejecutarlo por completo (seleccionar hasta antes de cada pipe, sino quedará abierta la sentencia)

```{r}
oli_long %>% 
  mutate(diseased = sev>0) %>%  
  group_by(year, loc, farm) %>% 
  summarise(inc = mean(diseased, na.rm=TRUE)*100) %>%  
  ungroup %>%  
  arrange(loc, year) -> oli_inc 
```

Damos print a "oli_inc"

```{r}
oli_inc
```

Graficamos oli_inc (una de las posibilidades)

```{r}
oli_inc %>%  
  ggplot()+
  # aes(x=factor(year), y=inc) +
  aes(x=factor(year), y=inc, color=factor(farm)) +
  geom_point() +
  # geom_line() +
  geom_line(aes(group=farm)) +
  facet_grid(. ~ loc)
```

- Prevalencia 

Nivel región - evolución interanual

```{r}
oli_inc %>% 
  mutate(diseased_farm = inc>0) %>%  
  group_by(year, loc) %>% 
  summarise(prev = mean(diseased_farm, na.rm=TRUE)*100) %>%  
  ungroup %>%  
  arrange(loc,year) -> oli_prev
```

```{r}
oli_prev
```

Plot de oli_prev

```{r}
oli_prev %>%  
  ggplot()+
  aes(x=factor(year), y=prev, color=factor(loc)) +
  geom_point() +
  geom_line(aes(group=loc))
```

- Severidad

```{r}
oli_long %>%  
  group_by(year, loc, farm) %>% 
  summarise(
    sev_media = mean(sev, na.rm=TRUE)) -> oli_sev
oli_sev
```

Print `oli_sev`

```{r}
oli_sev
```

Plot `oli_sev`

* Aprovechamos a usar una función muy eficiente que puede resultar una gran aliada en nuestro trabajo cotidiano: `stat_summary()`

```{r}
oli_sev %>%  
  ggplot()+
  aes(x=loc, y =sev_media)+
  geom_point(alpha=.3)+
  facet_wrap("year")+ 
  stat_summary(fun = mean, geom = "crossbar", col="blue")+
  stat_summary(aes(label=..y.. %>%  round(1)), 
               fun=mean, 
               geom="text", size=4, vjust = -0.5)  +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) 
```

## DSI

Disease severity index (Indice de severidad)

```{r}
# poroto  <-  rio::import("data/poroto.csv")
poroto <- read.csv("https://raw.githubusercontent.com/epifito/fitopatometria-r/main/data/poroto.csv")
poroto
```

- Poroto/sclerotinia (Vieira)

Dataset de formato wide, que incluye 3 variables descriptivas y 4 variables respuesta.

```{r}
poroto %>% 
  mutate(diseased = class_1 + class_2 + class_3 + class_4)  %>% 
  mutate(inc_p = diseased/n) %>% 
  mutate(midpoint = (.13*class_1 +.375*class_2 + .625*class_3 + .875*class_4)/n*100) %>%   
  mutate(midpoint_p = midpoint/100) %>% 
  mutate_at(vars(trt, rep), as.factor) -> poroto_dsi
poroto_dsi
```

```{r}
poroto_dsi %>%  
  ggplot() + 
  aes(x=trt, y =midpoint) + 
  geom_point(alpha=.3)
```

Model fitting

```{r}
mod1 <- lm(midpoint ~ trt, data = poroto_dsi)
resid_panel(mod1, plots = c("resid", "qq"))
check_heteroscedasticity(mod1)
check_normality(mod1)
cld(emmeans(mod1, ~ trt, type = "response"))
```

```{r}
mod2 <- lm(sqrt(midpoint) ~ trt, data = poroto_dsi)
resid_panel(mod2, plots = c("resid", "qq"))
check_heteroscedasticity(mod2)
check_normality(mod2)
cld(emmeans(mod2, ~ trt, type = "response"))
```

```{r}
asin_tran <- make.tran("asin.sqrt", 100)
mod3 <- with(asin_tran,
            lm(linkfun(midpoint) ~ trt, data = poroto_dsi)
            )
resid_panel(mod3, plots = c("resid", "qq"))
check_heteroscedasticity(mod3)
check_normality(mod3)
cld(emmeans(mod3, ~ trt, type = "response"))
```

```{r}
mod4 = lm(log(midpoint_p/(1-midpoint_p)) ~ trt, data = poroto_dsi)
resid_panel(mod4, plots = c("resid", "qq"))
check_heteroscedasticity(mod4)
check_normality(mod4)
cld(emmeans(mod4, ~trt, tran = "logit", type = "response"))
```

```{r}
compare_performance(mod1, mod2, mod3, mod4)
glmmTMB::glmmTMB()
```
